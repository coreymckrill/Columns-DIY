<?php
/**
 * Plugin Name: Columns DIY
 * Plugin URI: https://github.com/jupiterwise/Columns-DIY/
 * Description: Two simple shortcodes for generating div-based columns and rows. Wrap the desired content in <code>[column]</code> <code>[/column]</code>. Mark the end of a row with <code>[endrow]</code>. CSS not included.
 * Version: 1.0
 * Author: Corey McKrill
 * Author URI: http://jupiterwise.com/
 * License: GNU General Public License v2.0
 * License URI: http://www.gnu.org/licenses/gpl-2.0.html
 */

if ( ! class_exists( 'Columns_DIY' ) ) {

    class Columns_DIY {
		
		/**
		 * Set the prefix for all generated CSS classes.
		 */
		private $prefix = 'diy-';
		private function pfx( $attr ) { return $this->prefix . $attr; }
		
		/**
		 * Variables for tracking column and row output.
		 */
		private $colcount = '';
		private $rowcount = '';
		private $openrow = '';
		
		/**
		 * Hook into WordPress.
		 */
		function __construct() {
			
			// Shortcodes and filters
			add_shortcode( 'column', array( &$this, 'column_shortcode' ) );
			add_shortcode( 'endrow', array( &$this, 'row_shortcode' ) );
			add_filter( 'the_content', array( &$this, 'cleanup' ), 12, 1 );
			
		}
		
		/**
		 * Wraps content in a column <div>. If it's the first column in the row,
		 * it will also add an opening <div> for the row. The </div> for the row
		 * is generated by the [endrow] shortcode, or automatically after all
		 * other shortcodes have been run.
		 *
		 * Attributes:
		 *
		 * class    - Optional classes for the column <div> element. Separate
		 *            multiple classes with spaces.
		 * rowclass - Optional classes for the row <div> element. Only works
		 *            when included with the first column in a row.
		 * style    - Optional inline styles for the column <div> element.
		 * norow    - Set to true to omit the row wrapper <div>.
		 */
		function insert_column( $atts, $content = null ) {
			
			global $post;
			$pid = $post->ID;
			$pre_content = '';
			
			// Extract shortcode attributes.
			extract( shortcode_atts( array(
				'class'    => '',
				'rowclass' => '',
				'style'    => '',
				'norow'    => false
			), $atts ) );
			
			// If it's the first column in the row, add an opening <div>.
			if ( ! $this->openrow && ! $norow )
				$pre_content .= $this->begin_row( $rowclass );
			
			// Increment the column count.
			if ( isset( $this->colcount[$pid] ) ) {
				$this->colcount[$pid]++;
			} else {
				$this->colcount[$pid] = 1;
			}
			
			// Build the initial list of classes to add to column <div>.
			$colclasslist = $this->pfx( 'column' ) . ' ' . $this->pfx( 'column' ) . '-' . $this->colcount[$pid];
			
			// Determine parity
			if ( $this->colcount[$pid] % 2 ) {
				$colclasslist .= ' ' . $this->pfx( 'column' ) . '-odd';
			} else {
				$colclasslist .= ' ' . $this->pfx( 'column' ) . '-even';
			}
			
			// Add custom classes.
			if ( $class )
				$colclasslist .= ' ' . esc_attr( $class );
				
			// Initial styles.
			$colstyles = '';
			
			// Add custom styles.
			if ( $style )
				$colstyles .= ' style="' . esc_attr( $style ) . '"';
			
			// Put it all together.
			$content = $pre_content . '<div class="' . $colclasslist . '"' . $colstyles . ">\n" . $content . "</div>";
			
			// Allow for other shortcodes inside [column][/column].
			$content = do_shortcode( $content );
			
			// Fix strange <p> placements
			$content = preg_replace( '/<\/?p>/', "\n", $content );
			$content = wpautop( $content );
			
			// Add column end marker
			$content .= "<!-- end " . $this->pfx( 'column' ) . "-" . $this->colcount[$pid] . " -->\n";
			
			// Output
			return $content;
			
		}
		
		/**
		 * Generate the opening <div> for a row. To add custom classes to this
		 * <div>, use the rowclass attribute in the first [column] of a row.
		 */
		function begin_row( $rowclass = null ) {
			
			global $post;
			$pid = $post->ID;
			
			// Increment the row count.
			if ( isset( $this->rowcount[$pid] ) ) {
				$this->rowcount[$pid]++;
			} else {
				$this->rowcount[$pid] = 1;
			}
			
			// Build the initial list of classes to add to row <div>.
			$rowclasslist = $this->pfx( 'row' ) . ' ' . $this->pfx( 'row' ) . '-' . $this->rowcount[$pid];
			
			// Determine parity
			if ( $this->rowcount[$pid] % 2 ) {
				$rowclasslist .= ' ' . $this->pfx( 'row' ) . '-odd';
			} else {
				$rowclasslist .= ' ' . $this->pfx( 'row' ) . '-even';
			}
			
			// Add custom classes.
			if ( $rowclass )
				$rowclasslist .= ' ' . esc_attr( $rowclass );
			
			// Mark the row as "open" (no closing <div> yet).
			$this->openrow = 1;
			
			// Send opening <div> to insert_column.
			return '<div class="' . $rowclasslist . "\">\n";
		
		}
		
		/**
		 * Close the row <div>.
		 */
		function end_row() {
			
			if ( $this->openrow ) {
				
				global $post;
				$pid = $post->ID;
				
				// Mark the row as "closed".
				$this->openrow = 0;
				
				// Reset column count.
				$this->colcount[$pid] = 0;
				
				// Send the closing </div> to the compiling function.
				return "</div><!-- end " . $this->pfx( 'row' ) . "-" . $this->rowcount[$pid] . " -->\n\n";
				
			} else {
				
				return false;
			
			}
		
		}
		
		/**
		 * Close the last row <div> if it's still open. Clean up messy HTML left
		 * in the content as a result of shortcodes interacting with wpautop().
		 */
		function cleanup( $content ) {
			
			global $post;
			$pid = $post->ID;
			
			// Insert the last closing </div> if the user forgot to use [endrow]
			if ( $this->openrow ) {
				$colstr = $this->pfx( 'column' ) . "-" . $this->colcount[$pid] . " -->\n";
				preg_match_all( '/' . $colstr . '/', $content, $matches, PREG_OFFSET_CAPTURE );
				$lastcol = array_pop( array_pop( $matches ) );
				$closetag = $this->end_row();
				$content = substr_replace( $content, $closetag, $lastcol[1] + strlen( $colstr ), 0 );
			}
			
			// Regex patterns for cleaning up the HTML.
			$patterns = array(
				array(
					'/' . $this->pfx( 'row' ) . "-([0-9]+) -->\n?\n?<\/p>/",
					$this->pfx( 'row' ) . "-$1 -->\n"
				),
				array(
					'/<p><div/',
					'<div'
				)
			);
			
			// Run the regex.
			foreach ( $patterns as $pattern ) {
				$content = preg_replace( $pattern[0], $pattern[1], $content );
			}
			
			// Send the cleaned up content on its way.
			return $content;
		
		}
		
		/**
		 * Shortcode handlers
		 */
		function column_shortcode( $atts, $content ) {
			return $this->insert_column( $atts, $content );
		}
		function row_shortcode() {
			return $this->end_row();
		}
		
	} // End class Columns_DIY
	
	// Instantiate the plugin.
	$columns_diy = new Columns_DIY();
	
} // End if
